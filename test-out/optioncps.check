/*****************************************
  Emitting Generated Code                  
*******************************************/
class singleConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x10 = if (x1) {
x3 = true
x4 = x0
()
} else {
()
}
val x11 = x3
val x12 = x4
val x16 = if (x11) {
val x14 = new OptionInt(x12,true)
x14
} else {
val x15 = new OptionInt(0,false)
x15
}
x16
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
OptionInt(2,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x41 = if (x1) {
var x7: Boolean = false
var x8: Int = 0
val x6 = x0 >= 1
val x14 = if (x6) {
x7 = true
x8 = x0
()
} else {
()
}
val x15 = x7
val x16 = x8
val x22 = if (x15) {
x3 = true
x4 = x16
()
} else {
()
}
x22
} else {
var x25: Boolean = false
var x26: Int = 0
val x24 = x0 >= 5
val x31 = if (x24) {
x25 = true
x26 = x0
()
} else {
()
}
val x32 = x25
val x33 = x26
val x39 = if (x32) {
x3 = true
x4 = x33
()
} else {
()
}
x39
}
val x42 = x3
val x43 = x4
val x47 = if (x42) {
val x45 = new OptionInt(x43,true)
x45
} else {
val x46 = new OptionInt(0,false)
x46
}
x47
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(5,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional2 extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 == 3
val x26 = if (x1) {
x3 = true
x4 = x0
()
} else {
var x10: Boolean = false
var x11: Int = 0
val x16 = if (x1) {
x10 = true
x11 = x0
()
} else {
()
}
val x17 = x10
val x18 = x11
val x24 = if (x17) {
x3 = true
x4 = x18
()
} else {
()
}
x24
}
val x27 = x3
val x28 = x4
val x32 = if (x27) {
val x30 = new OptionInt(x28,true)
x30
} else {
val x31 = new OptionInt(0,false)
x31
}
x32
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapSome extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
val x1 = x0 * 2
val x2 = new OptionInt(x1,true)
x2
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(10,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapNone extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
val x1 = new OptionInt(0,false)
x1
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x10 = if (x1) {
x3 = true
x4 = x0
()
} else {
()
}
val x11 = x3
val x12 = x4
val x17 = if (x11) {
val x14 = x12 * 2
val x15 = new OptionInt(x14,true)
x15
} else {
val x16 = new OptionInt(0,false)
x16
}
x17
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapConditional2 extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x15 = if (x1) {
x3 = true
x4 = x0
()
} else {
x3 = true
val x10 = x0 * 2
x4 = x10
()
}
val x16 = x3
val x17 = x4
val x22 = if (x16) {
val x19 = x17 * 3
val x20 = new OptionInt(x19,true)
x20
} else {
val x21 = new OptionInt(0,false)
x21
}
x22
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(30,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class mapNestedConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x29 = if (x1) {
var x7: Boolean = false
var x8: Int = 0
val x6 = x0 >= 1
val x14 = if (x6) {
x7 = true
x8 = x0
()
} else {
()
}
val x15 = x7
val x16 = x8
val x22 = if (x15) {
x3 = true
x4 = x16
()
} else {
()
}
x22
} else {
x3 = true
val x24 = x0 * 2
x4 = x24
()
}
val x30 = x3
val x31 = x4
val x36 = if (x30) {
val x33 = x31 * 3
val x34 = new OptionInt(x33,true)
x34
} else {
val x35 = new OptionInt(0,false)
x35
}
x36
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(30,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapSome extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
val x1 = x0 * 2
val x2 = new OptionInt(x1,true)
x2
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(10,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapNone extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
val x1 = new OptionInt(0,false)
x1
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class flatMapConditional extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x3: Boolean = false
var x4: Int = 0
val x1 = x0 <= 3
val x10 = if (x1) {
x3 = true
x4 = x0
()
} else {
()
}
val x11 = x3
val x12 = x4
val x36 = if (x11) {
var x15: Boolean = false
var x16: Int = 0
val x14 = x12 >= 1
val x28 = if (x14) {
x15 = true
val x18 = x12 * 5
x16 = x18
()
} else {
x15 = true
val x23 = x12 * 10
x16 = x23
()
}
val x29 = x15
val x30 = x16
val x34 = if (x29) {
val x32 = new OptionInt(x30,true)
x32
} else {
val x33 = new OptionInt(0,false)
x33
}
x34
} else {
val x33 = new OptionInt(0,false)
x33
}
x36
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
OptionInt(15,true)
OptionInt(0,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class varOptionCPS extends ((Int)=>(OptionInt)) {
def apply(x0:Int): OptionInt = {
var x2: Boolean = true
var x3: Int = x0
val x5 = x2
val x6 = x3
val x15 = if (x5) {
x2 = true
val x9 = x6 + 1
x3 = x9
()
} else {
x2 = false
()
}
val x16 = x2
val x17 = x3
val x21 = if (x16) {
val x19 = new OptionInt(x17,true)
x19
} else {
val x20 = new OptionInt(0,false)
x20
}
x21
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(6,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedOptionCPSToOption extends ((Int)=>(OptionOptionInt)) {
def apply(x0:Int): OptionOptionInt = {
val x4 = new OptionInt(x0,true)
val x5 = new OptionOptionInt(x4,true)
x5
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionOptionInt(OptionInt(5,true),true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedZeroVal extends ((Int)=>(OptionOptionInt)) {
def apply(x0:Int): OptionOptionInt = {
val x4 = new OptionInt(0,false)
val x5 = new OptionOptionInt(x4,false)
x5
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionOptionInt(OptionInt(0,false),false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedVarOptionCPS extends ((Int)=>(OptionOptionInt)) {
def apply(x0:Int): OptionOptionInt = {
var x3: Boolean = true
var x4: Boolean = true
var x5: Int = x0
val x8 = x3
val x9 = x4
val x10 = x5
val x19 = if (x8) {
val x16 = if (x9) {
val x14 = new OptionInt(x10,true)
x14
} else {
val x15 = new OptionInt(0,false)
x15
}
val x17 = new OptionOptionInt(x16,true)
x17
} else {
val x15 = new OptionInt(0,false)
val x18 = new OptionOptionInt(x15,false)
x18
}
x19
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionOptionInt(OptionInt(5,true),true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedVarOptionCPSAssign extends ((Int)=>(OptionOptionInt)) {
def apply(x0:Int): OptionOptionInt = {
var x3: Boolean = true
var x4: Boolean = true
var x5: Int = x0
x3 = true
x4 = true
val x8 = x0 + 1
x5 = x8
val x14 = x3
val x15 = x4
val x16 = x5
val x25 = if (x14) {
val x22 = if (x15) {
val x20 = new OptionInt(x16,true)
x20
} else {
val x21 = new OptionInt(0,false)
x21
}
val x23 = new OptionOptionInt(x22,true)
x23
} else {
val x21 = new OptionInt(0,false)
val x24 = new OptionOptionInt(x21,false)
x24
}
x25
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionOptionInt(OptionInt(6,true),true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedOptionCPS extends ((Int)=>(OptionOptionInt)) {
def apply(x0:Int): OptionOptionInt = {
var x11: Boolean = false
var x12: Boolean = false
var x13: Int = 0
val x1 = x0 <= 3
val x24 = if (x1) {
x11 = true
x12 = true
x13 = x0
()
} else {
x11 = true
x12 = true
val x4 = x0 + 1
x13 = x4
()
}
val x25 = x11
val x26 = x12
val x27 = x13
val x35 = if (x25) {
val x32 = if (x26) {
val x30 = new OptionInt(x27,true)
x30
} else {
val x31 = new OptionInt(0,false)
x31
}
val x33 = new OptionOptionInt(x32,true)
x33
} else {
val x31 = new OptionInt(0,false)
val x34 = new OptionOptionInt(x31,false)
x34
}
x35
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionOptionInt(OptionInt(6,true),true)
