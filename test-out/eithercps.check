/*****************************************
  Emitting Generated Code                  
*******************************************/
class singleConditional extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x3: Int = 0
var x4: Int = 0
var x5: Boolean = true
val x2 = x0 <= 3
val x15 = if (x2) {
x3 = 2
x4 = 0
x5 = true
()
} else {
x3 = 0
x4 = 4
x5 = false
()
}
val x16 = x3
val x17 = x4
val x18 = x5
val x23 = if (x18) {
x1 = x16
()
} else {
x1 = x17
()
}
val x24 = x1
x24
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
2
/*****************************************
  Emitting Generated Code                  
*******************************************/
class nestedConditional extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
var x4: Int = 0
var x5: Int = 0
var x6: Boolean = true
val x2 = x0 <= 3
val x38 = if (x2) {
var x8: Int = 0
var x9: Int = 0
var x10: Boolean = true
val x3 = x0 >= 1
val x20 = if (x3) {
x8 = 2
x9 = 0
x10 = true
()
} else {
x8 = 0
x9 = 3
x10 = false
()
}
val x21 = x8
val x22 = x9
val x23 = x10
val x32 = if (x23) {
x4 = x21
x5 = 0
x6 = true
()
} else {
x4 = 0
x5 = x22
x6 = false
()
}
x32
} else {
x4 = 0
x5 = 4
x6 = false
()
}
val x39 = x4
val x40 = x5
val x41 = x6
val x46 = if (x41) {
x1 = x39
()
} else {
x1 = x40
()
}
val x47 = x1
x47
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
4
2
3
